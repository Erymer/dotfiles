#------------------------------------------------------------------------------
# FUNCTIONS
#------------------------------------------------------------------------------
snippet f "Function definition. No parameters."
def $1():
	'''
	$2
	'''
	pass
endsnippet

snippet ff "Function definition. One parameters"
def $1($2):
	'''
	$3
	:param1: $4
	:returns: $5
	'''
endsnippet

snippet fff "Function definition. Two parameters."
def $1($2):
	'''
	$3
	:param1: $4
	:param2: $5
	:returns: $6
	'''
endsnippet

#------------------------------------------------------------------------------
# Variable
#------------------------------------------------------------------------------

snippet v "Variable"
$1 = $2
endsnippet

#------------------------------------------------------------------------------
# Classes
#------------------------------------------------------------------------------
snippet c "Class with constructor"
class $1:
	def __init__(self, $2):
		self.$2 = $2
endsnippet

snippet cc "Class with constructor"
class $1:
	def __init__(self, $2, $3):
		self.$2 = $2
		self.$3 = $3
endsnippet

snippet inherit "Inherit class"
class $1($2):
	def __init__(self):
		super().__init__()
endsnippet


#------------------------------------------------------------------------------
# METHODS
#------------------------------------------------------------------------------
snippet m "Method with no parameters"
def $1(self):
	'''
	$2
	'''
	pass
endsnippet

snippet mm "Method with one parameter"
def $1(self, $2):
	'''
	$3
	'''
	pass
endsnippet

#------------------------------------------------------------------------------
# MISC
#------------------------------------------------------------------------------
snippet todo "TODO" b
# TODO: $1
endsnippet

snippet shebang "Python 3 shebang" b
#!/usr/bin/env python3
endsnippet

snippet today "Writes today date"
`!v strftime("%c")`
endsnippet

snippet bugs "Bug delimitator" b
# ==BUGS=======================================================================
# $1
# =============================================================================
endsnippet

snippet notes "Notes delimitator" b
# ==NOTES======================================================================
# $1
# =============================================================================
endsnippet

snippet delimitator "Line used to delimitate stuff" b

# =============================================================================

endsnippet

#------------------------------------------------------------------------------
# LOOPS
#------------------------------------------------------------------------------
snippet	for "For loop" 
for $1 in $2:
	$3
endsnippet

snippet	while "while" 
while $1:
	$2
endsnippet

snippet	dictfor "Iterate over a dictionary" 
for (${1:key}, ${2:value}) in ${3:dict}.items():
	$4
endsnippet

#------------------------------------------------------------------------------
# CONDITIONALS
#------------------------------------------------------------------------------
snippet	if "If conditional"
if $1:
	$2		
endsnippet

snippet	elif "elif conditional"
elif $1:
	$2		
endsnippet

snippet	else "else conditional"
else:
	$1
endsnippet

#------------------------------------------------------------------------------
# PRINT
#------------------------------------------------------------------------------
snippet sout "Print string"
print("$1")
endsnippet

snippet fout "Print f strings"
print(f"$1")
endsnippet

snippet out "print()"
print($1)
endsnippet

#------------------------------------------------------------------------------
# INPUT
#------------------------------------------------------------------------------
snippet in "input()"
$1 = input("${2:text}")
endsnippet

#------------------------------------------------------------------------------
# FILES
#------------------------------------------------------------------------------

snippet read "Open file"
with open("$1") as $2:
	$3 = $2.read()
endsnippet

snippet append "Append to file file"
with open("$1", mode="a") as $2:
	$2.write(${3:"string_to_append"})
endsnippet

snippet write "Write file"
with open("$1", mode="w") as $2:
	$2.write(${3:"string_to_write}")
endsnippet

snippet readlines "Read lines"
with open("$1") as $2:
	$3 = $2.readlines()
endsnippet


#------------------------------------------------------------------------------
# LIST/DICTIONARY COMPREHENSION
#------------------------------------------------------------------------------

snippet lscomp "List Comprehension"
${1:list_name} = [${2:new_item} for ${3:item} in ${4:list}]
endsnippet

snippet condlscomp "List comprehension with conditional"
${1:list_name} = [${2:new_item} for ${3:item} in ${4:list} if ${5:test}]
endsnippet

snippet dictcomp "Dictionary comprehension from dictionary"
${1:new_dict} = {${2:new_key}:${3:new_value} for (${4:key}, ${5:value}) in ${6:dict}.items()}
endsnippet

snippet dictlscomp "Dictionary comprehension from list"
${1:new_dict} = {${2:new_key}:${3:new_value} for ${4:item} in ${5:list}}
endsnippet

snippet conddictcomp "Dictionary comprehension from dictionary with conditional"
${1:new_dict} = {${2:new_key}:${3:new_value} for (${4:key}, ${5:value}) in ${6:dict}.items() if ${7:test}}
endsnippet

snippet conddictlscomp "Dictionary comprehension from list with conditional"
${1:new_dict} = {${2:new_key}:${3:new_value} for ${4:item} in ${5:list} if ${6:test}}
endsnippet

#------------------------------------------------------------------------------
# DJANGO
#------------------------------------------------------------------------------

snippet model "Model class"
class $1(models.Model):
	${2:data_types}

	def __str__(self):
		return self.$2
endsnippet


snippet simpleview "Creates a simple view function"
from django.http import HttpResponse

def hello(requests):
	return HttpResponse('Do not gentle into that good night.')
endsnippet


snippet urlspy "Url file"
from django.urls import path
from . import views

urlpatterns = [
		path("", views.$1)
]
endsnippet


snippet modeltest "Model creation unit test"
def test_create_$1(self):
	"""Test creating a $1 is sucessful"""
	$1 = models.$1.objects.create(
		$2
	)

	saved_$1 = models.$1.objects.get(id=$1.id)

	self.assertEqual($1, saved_$1)
endsnippet



#---------------------------
# Unit test
#---------------------------
snippet inittest "Basic unit test file"
import unittest
from ${1:module} import ${2:class}


class Test${3:name}(unittest.TestCase):

	def setUp(self):
		'''
		This will be runned before every test
		'''
		pass


	def tearDown(self):
		'''
		This will be runned after every test
		'''
		pass


	def test_${4:name}(self):
		pass

if __name__ == '__main__':
	unittest.main()
endsnippet

